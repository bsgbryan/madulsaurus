"use strict";(self.webpackChunkmadulsaurus=self.webpackChunkmadulsaurus||[]).push([[506],{1159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>r});var s=t(5893),i=t(1151);const l={sidebar_position:3,title:"Jedi (Advanced)",custom_edit_url:null},a=void 0,o={id:"jedi",title:"Jedi (Advanced)",description:"Paths",source:"@site/docs/jedi.md",sourceDirName:".",slug:"/jedi",permalink:"/docs/jedi",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Jedi (Advanced)",custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Padawan (Getting Started)",permalink:"/docs/padawan"},next:{title:"Jedi Master (Deep Dive)",permalink:"/docs/jedi-master"}},d={},r=[{value:"Paths",id:"paths",level:2},{value:"Specifying third-party dependnecies",id:"specifying-third-party-dependnecies",level:2},{value:"Mapping default export",id:"mapping-default-export",level:2},{value:"Knowing thy-self",id:"knowing-thy-self",level:2}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"paths",children:"Paths"}),"\n",(0,s.jsxs)(n.p,{children:["M\xe4d\u016bl uses TypeScript's ",(0,s.jsx)(n.code,{children:"compilerOptions.paths"})," to find your dependencies."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="madul-example/tsconfig.json"',children:'{\n  ...\n  "compilerOptions": {\n    ...\n    "paths": {\n      ...\n      // You can specify as many entries as you like\n      "#*": ["./lib/*"],\n      "-*": ["./src/controllers/*"],\n      "!*": ["./api/*"]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"specifying-third-party-dependnecies",children:"Specifying third-party dependnecies"}),"\n",(0,s.jsx)(n.p,{children:"First, execute this \ud83d\udc8e of a command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bun i is-odd\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then, add the following to your TypeSscript config:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="madul-example/tsconfig.json"',children:'{\n  ...\n  "compilerOptions": {\n    ...\n    "paths": {\n      ...\n      ":*": ["./node_modules/*"]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now, create the following M\xe4d\u016bl:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="madul-example/src/IsMaybe.ts"',children:"import { type Input } from \"@bsgbryan/madul\"\n\nexport const dependencies = () => ({\n  ':is-odd': ['IsOdd']\n})\n\nexport interface OddInput extends SyncInput {\n  IsOdd: CallbableFunction\n  value: number\n}\n\nexport const odd = ({ IsOdd, value }: OddInput) => IsOdd(value)\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"Scoped packages",type:"tip",children:[(0,s.jsxs)(n.p,{children:["If you don't like using ",(0,s.jsx)(n.code,{children:":@scoped/package"})," to specify scoped third-party dependencies, you can add the following to your TypeScript config:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="madul-example/tsconfig.json"',children:'{\n  ...\n  "compilerOptions": {\n    ...\n    "paths": {\n      ...\n      "@*": ["./node_modules/@*"]\n    }\n  }\n}\n'})}),(0,s.jsx)(n.p,{children:"With this, you can specify third-party dependencies like this:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="madul-example/src/Bang.ts"',children:"import { type Input } from \"@bsgbryan/madul\"\n\nexport const dependencies = () => ({\n  '@scoped/package':    ['foo'],\n  ':scopeless-package': ['bar'],\n})\n\nexport interface CoolInput extends SyncInput {\n  foo: CallableFunction\n  bar: CallableFunction\n  baz: string\n}\n\nexport const cool = ({ foo, bar, baz }: CoolInput) => {\n  console.log(`${foo()}, ${bar()}, ${baz}`)\n}\n"})})]}),"\n",(0,s.jsx)(n.p,{children:"And finally, let's test it!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="madul-example/test/IsMaybe.test.ts"',children:"import {\n  describe,\n  expect,\n  it,\n} from \"bun:test\"\n\nimport { odd } from \"+IsMaybe\"\n\ndescribe('IsMaybe.odd', () => {\n  it('answers the tough question', () => {\n    expect(odd({ value: 2 })).toBeTruthy()\n    expect(odd({ value: 1 })).toBeFalsy()\n  })\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"Wait a second, though ..."}),"\n",(0,s.jsx)(n.h2,{id:"mapping-default-export",children:"Mapping default export"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"is-odd"})," only has a single, default, export - how did M\xe4d\u016bl get that wired to the ",(0,s.jsx)(n.code,{children:"IsOdd"})," function we used?"]}),"\n",(0,s.jsx)(n.p,{children:"M\xe4d\u016bl maps the first capitalized item you specify to a dependnecy's default export. It can do this because the JavaScript/TypeScript naming convention is for function names to start with lowercased letters."}),"\n",(0,s.jsx)(n.h2,{id:"knowing-thy-self",children:"Knowing thy-self"}),"\n",(0,s.jsxs)(n.p,{children:["Every exported function gets ",(0,s.jsx)(n.code,{children:"self"})," passed as a parameter. This is how functions can call each other."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="madul-example/src/Referential.ts"',children:'import {\n  type InnerSelf,\n  type SyncInput,\n} from "@bsgbryan/madul"\n\nexport interface Self extends InnerSelf {\n  me:     CallableFunction\n  myself: CallableFunction\n}\n\nexport const me = ({ self }: SyncInput) => {\n  return `Do you mean ${self.myself()}`\n}\n\nexport const myself = ({ self }: SyncInput) => {\n  return `Are you looking for ${self.me()}?`\n}\n\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"Heads up",type:"danger",children:(0,s.jsxs)(n.p,{children:["Executing either of these functions via ",(0,s.jsx)(n.code,{children:"bun repl"})," or any other means will result in infinite recursion.\nThey're intended to be silly, fun, examples; please don't execute them for real \ud83d\ude0a"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="madul-example/test/Referential.test.ts"',children:'import {\n  describe,\n  expect,\n  it,\n} from "bun:test"\n\nimport {\n  Self,\n  me,\n  myself,\n} from "+Referential"\n\ndescribe("Referential.me", () => {\n  it(\'calls myself\', () => {\n    let called = false\n    const self = {\n      myself: () => called = true\n    } as unknown as Self\n\n    me({ self })\n\n    expect(called).toBeTruthy()\n  })\n})\n\ndescribe("Referential.myself", () => {\n  it(\'calls me\', () => {\n    let called = false\n    const self = {\n      me: () => called = true\n    } as unknown as Self\n\n    myself({ self })\n\n    expect(called).toBeTruthy()\n  })\n})\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var s=t(7294);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);